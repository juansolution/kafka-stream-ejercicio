buildscript {
    repositories {
        mavenCentral()
        maven {
            url = uri("https://packages.confluent.io/maven/")
        }
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
        maven {
            url = uri("https://jitpack.io")
        }
    }
}

plugins {
    id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
    id "com.github.imflog.kafka-schema-registry-gradle-plugin" version "1.8.0"
}

apply plugin: 'com.github.imflog.kafka-schema-registry-gradle-plugin'
apply plugin: 'com.github.davidmc24.gradle.plugin.avro'


dependencies {
    implementation project(':model')
    implementation 'org.springframework:spring-context'
    implementation 'org.apache.avro:avro:1.11.1'
    implementation "io.confluent:kafka-avro-serializer:7.1.1"

    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
}


schemaRegistry {
    url = ''
    quiet = false
    outputDirectory = project.projectDir.toString() + '/src/main/avro/result'

    register {
        subject('com.satrack.receiveravro.TinyEvent', project.projectDir.toString() + '/src/main/avro/tinyEvent.avsc', 'AVRO')
        subject('com.satrack.receiveravro.GeofenceEventEntity', project.projectDir.toString() + '/src/main/avro/geofenceEventEntity.avsc', 'AVRO')
        subject('com.satrack.receiveravro.CanonicalEvent', project.projectDir.toString() + '/src/main/avro/canonicalEvent.avsc', 'AVRO')
        subject('com.satrack.receiveravro.VehicleStatus', project.projectDir.toString() + '/src/main/avro/vehicleStatus.avsc', 'AVRO')
    }

    config {
        subject('com.satrack.receiveravro.TinyEvent', 'FULL_TRANSITIVE')
        subject('com.satrack.receiveravro.GeofenceEventEntity', 'FULL_TRANSITIVE')
        subject('com.satrack.receiveravro.CanonicalEvent', 'FULL_TRANSITIVE')
        subject('com.satrack.receiveravro.VehicleStatus', 'FULL_TRANSITIVE')
    }

    download {
        subject('com.satrack.receiveravro.TinyEvent', project.projectDir.toString() + '/src/main/avro', 'tinyEvent')
        subject('com.satrack.receiveravro.GeofenceEventEntity', project.projectDir.toString() + '/src/main/avro', 'geofenceEventEntity')
        subject('com.satrack.receiveravro.CanonicalEvent', project.projectDir.toString() + '/src/main/avro', 'canonicalEvent')
        subject('com.satrack.receiveravro.VehicleStatus', project.projectDir.toString() + '/src/main/avro', 'vehicleStatus')
    }

    compatibility {
        subject('com.satrack.receiveravro.TinyEvent', project.projectDir.toString() + '/src/main/avro/tinyEvent.avsc', 'AVRO')
        subject('com.satrack.receiveravro.GeofenceEventEntity', project.projectDir.toString() + '/src/main/avro/geofenceEventEntity.avsc', 'AVRO')
        subject('com.satrack.receiveravro.CanonicalEvent', project.projectDir.toString() + '/src/main/avro/canonicalEvent.avsc', 'AVRO')
        subject('com.satrack.receiveravro.VehicleStatus', project.projectDir.toString() + '/src/main/avro/vehicleStatus.avsc', 'AVRO')
    }
}